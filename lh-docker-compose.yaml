services:
  kafka:
    container_name: lh-kafka
    image: apache/kafka:3.9.0
    environment:
      KAFKA_LISTENERS: CONTROLLER://:29092,EXTERNAL://:19092,INTERNAL://:9092
      KAFKA_ADVERTISED_LISTENERS: EXTERNAL://localhost:19092,INTERNAL://kafka:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT,INTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_BROKER_ID: "1"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: "1"
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: "1"
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: "1"
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@localhost:29092
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_NODE_ID: "1"
      KAFKA_KRAFT_CLUSTER_ID: abcdefghijklmnopqrstuv
    restart: on-failure
    healthcheck:
      test: /opt/kafka/bin/kafka-topics.sh --bootstrap-server kafka:9092 --list > /dev/null 2>&1
      interval: 5s
  littlehorse:
    container_name: lh-server
    image: littlehorse/lh-server
    environment:
      LHS_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      LHS_SHOULD_CREATE_TOPICS: "true"
      LHS_HEALTH_SERVICE_PORT: "1822"
      LHS_ADVERTISED_LISTENERS: PLAIN://lh-server:2023
      LHS_ROCKSDB_TOTAL_MEMTABLE_BYTES: 641728512
      LHS_ROCKSDB_TOTAL_BLOCK_CACHE_BYTES: 268435456
      LHS_NUM_NETWORK_THREADS: "15"
      LHS_CORE_STREAM_THREADS: "7"
      LHS_STREAMS_METRICS_LEVEL: "DEBUG"
      LHS_METRICS_LEVEL: "TRACE"
      KAFKA_LOG_LEVEL: "INFO"
      LHS_CORE_STREAMS_COMMIT_INTERVAL: "300"
      LHS_ROCKSDB_COMPACTION_THREADS: "5"
      LHS_CORE_STATESTORE_CACHE_BYTES: "134217728"
      JAVA_OPTS: "-Dcom.sun.management.jmxremote \
                        -Dcom.sun.management.jmxremote.authenticate=false \
                        -Dcom.sun.management.jmxremote.ssl=false \
                        -Dcom.sun.management.jmxremote.port=1099 \
                        -Dcom.sun.management.jmxremote.rmi.port=1099 \
                        -Djava.rmi.server.hostname=localhost
                        -Xms2048m \
                        -Xmx6144m \
                        "
    restart: on-failure
    healthcheck:
      test: curl -f localhost:1822/liveness
      interval: 5s
    depends_on:
      kafka:
        condition: service_healthy
    ports:
      - "2023:2023"
      - "1822:1822"
      - "1099:1099"
  canary-worker:
    image: littlehorse/lh-canary
    restart: on-failure
    deploy:
      replicas: 1
    environment:
      LH_CANARY_METRONOME_ENABLE: false
      LH_CANARY_AGGREGATOR_ENABLE: false
      LH_CANARY_WORKER_ENABLE: true
      LH_CANARY_LHC_API_HOST: lh-server
      LH_CANARY_LHC_API_PORT: 2023
      LH_CANARY_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
    depends_on:
      littlehorse:
        condition: service_healthy
  canary-aggregator:
    container_name: lh-canary-aggregator
    image: littlehorse/lh-canary
    restart: on-failure
    environment:
      LH_CANARY_METRONOME_ENABLE: false
      LH_CANARY_AGGREGATOR_ENABLE: true
      LH_CANARY_WORKER_ENABLE: false
      LH_CANARY_LHC_API_HOST: lh-server
      LH_CANARY_LHC_API_PORT: 2023
      LH_CANARY_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
    depends_on:
      littlehorse:
        condition: service_healthy
    ports:
      - "1922:4023"
  canary-metronome:
    image: littlehorse/lh-canary
    restart: on-failure
    deploy:
      replicas: 1
    environment:
      LH_CANARY_METRONOME_ENABLE: true
      LH_CANARY_AGGREGATOR_ENABLE: false
      LH_CANARY_WORKER_ENABLE: false
      LH_CANARY_LHC_API_HOST: lh-server
      LH_CANARY_LHC_API_PORT: 2023
      LH_CANARY_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      LH_CANARY_METRONOME_RUN_REQUESTS: '1000'
      LH_CANARY_METRONOME_RUN_THREADS: '20'
      LH_CANARY_METRONOME_RUN_SAMPLE_RATE: '100'
      LH_CANARY_METRONOME_RUN_FREQUENCY_MS: '1000'
    depends_on:
      littlehorse:
        condition: service_healthy
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: cadvisor
    platform: linux/aarch64
    ports:
    - 8080:8080
    volumes:
    - "/:/rootfs:ro"
    - "/var/run:/var/run:ro"
    - "/sys:/sys:ro"
    - "/var/lib/docker/:/var/lib/docker:ro"
    - "/dev/disk/:/dev/disk:ro"
  prometheus:
    image: prom/prometheus
    container_name: prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    ports:
      - 9090:9090
    restart: unless-stopped
    volumes:
      - ./prometheus:/etc/prometheus
    extra_hosts:
      - "host.docker.internal:host-gateway"
    depends_on:
    - cadvisor
  grafana:
    image: grafana/grafana
    container_name: grafana
    ports:
      - 3000:3000
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=grafana
    volumes:
      - ./grafana:/etc/grafana/provisioning/datasources
      - ./dashboard.yaml:/etc/grafana/provisioning/dashboards/main.yaml
      - ./dashboards:/var/lib/grafana/dashboards
    depends_on:
    - prometheus